import paho.mqtt.client as mqtt
import configparser
import subprocess
import telegram
import time
from datetime import datetime

# === –ß—Ç–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–π ===
config = configparser.ConfigParser()
config.read('/opt/tg_mqtt_bot/settings.ini')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ settings.ini
IP = config['MQTT']['ip']
PORT = int(config['MQTT']['port'])
BOT_TOKEN = config['TELEGRAM']['bot_token']
CHAT_ID = int(config['TELEGRAM']['chat_id'])

# –¢–µ–º—ã MQTT
TOPIC_SYSTEM = "zigbee2mqtt/command/reboot/system"
TOPIC_Z2M = "zigbee2mqtt/command/reboot/z2m_service"

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä Telegram-–±–æ—Ç–∞ (–¥–ª—è —Å—Ç–∞—Ä–æ–π –≤–µ—Ä—Å–∏–∏ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏)
bot = telegram.Bot(token=BOT_TOKEN)

# === –§–£–ù–ö–¶–ò–Ø: –Ω–∞–¥—ë–∂–Ω—ã–π –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Zigbee2MQTT ===
def restart_z2m_service():
    print("‚Üí –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ z2m.service...")
    subprocess.run(["sudo", "systemctl", "stop", "z2m.service"], check=True)

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    for i in range(10):  # 15 –ø–æ–ø—ã—Ç–æ–∫ –ø–æ 2 —Å–µ–∫ = 30 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
        status = subprocess.run(
            ["systemctl", "is-active", "z2m.service"],
            capture_output=True, text=True
        ).stdout.strip()

        if status == "inactive":
            print("‚Üí –°–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
            break
        else:
            print(f"‚è≥ –°–µ—Ä–≤–∏—Å –µ—â—ë –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ {i+1}/10)...")
            time.sleep(2)
    else:
        raise RuntimeError("–°–µ—Ä–≤–∏—Å Zigbee2MQTT –Ω–µ –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥!")

    print("‚Üí –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–∞ z2m.service...")
    subprocess.run(["sudo", "systemctl", "start", "z2m.service"], check=True)
    print("‚Üí –°–µ—Ä–≤–∏—Å Zigbee2MQTT —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω.")

# === –§–£–ù–ö–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ö–ò –°–û–û–ë–©–ï–ù–ò–ô ===
def on_message(client, userdata, msg):
    curr_topic_value = msg.payload.decode("utf-8").strip().lower()
    topic = msg.topic
    print(f"[{datetime.now()}] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —Ç–æ–ø–∏–∫–∞ '{topic}': '{curr_topic_value}'")

    try:
        if curr_topic_value == "off":
            # --- –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã ---
            if topic == TOPIC_SYSTEM:
                bot.sendMessage(chat_id=CHAT_ID, text="üîÑ –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–∏—Å—Ç–µ–º—É")
                print("‚Üí –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è reboot...")
                subprocess.run(["sudo", "reboot"], check=True)

            # --- –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Zigbee2MQTT ---
            elif topic == TOPIC_Z2M:
                bot.sendMessage(chat_id=CHAT_ID, text="‚ôªÔ∏è –ü–æ–ª—É—á–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ Zigbee2MQTT (stop ‚Üí wait ‚Üí start)")
                restart_z2m_service()
                bot.sendMessage(chat_id=CHAT_ID, text="‚úÖ –°–µ—Ä–≤–∏—Å Zigbee2MQTT —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω")

            else:
                print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–æ–ø–∏–∫: {topic}")

        else:
            print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ '{curr_topic_value}' –≤ —Ç–æ–ø–∏–∫–µ '{topic}'")

    except subprocess.CalledProcessError as e:
        error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}"
        print(error_msg)
        bot.sendMessage(chat_id=CHAT_ID, text=f"‚ùå {error_msg}")

    except Exception as e:
        error_msg = f"–û—à–∏–±–∫–∞: {e}"
        print(error_msg)
        bot.sendMessage(chat_id=CHAT_ID, text=f"‚ö†Ô∏è {error_msg}")

# === –ù–ê–°–¢–†–û–ô–ö–ê MQTT ===
client = mqtt.Client(mqtt.CallbackAPIVersion.VERSION2)
client.on_message = on_message

client.connect(IP, PORT, 60)
client.subscribe([(TOPIC_SYSTEM, 0), (TOPIC_Z2M, 0)])

print(f"[{datetime.now()}] –û–∂–∏–¥–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥...")
print(f"‚Üí {TOPIC_SYSTEM} ‚Äî –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
print(f"‚Üí {TOPIC_Z2M} ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ Zigbee2MQTT (stop ‚Üí wait ‚Üí start)")

client.loop_forever()
